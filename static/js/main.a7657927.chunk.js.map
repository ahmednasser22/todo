{"version":3,"sources":["components/ShowItems.js","components/AddItems.js","App.js","serviceWorker.js","index.js"],"names":["ShowItems","props","itemsFromState","items_to_show","allItems","length","map","item","className","key","id","activity","time","onClick","deleteItem","AddItems","state","handleChange","e","setState","target","value","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","originalState","items","Math","random","newItems","push","alert","itemId","window","confirm","newItems2","itemIndex","findIndex","splice","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8RAiCeA,G,MA9BG,SAACC,GAEf,IAAMC,EAAiBD,EAAME,cACvBC,EAAWF,EAAeG,OAC5BH,EAAeI,KAAI,SAAAC,GACnB,OACI,yBAAKC,UAAY,YAAYC,IAAKF,EAAKG,IACnC,8BAAOH,EAAKI,SAAZ,KACA,8BAAOJ,EAAKK,KAAZ,KAEA,0BAAMC,QAAS,kBAAMZ,EAAMa,WAAWP,EAAKG,MAA3C,YAIR,2CAGJ,OACI,yBAAKF,UAAY,aACb,yBAAKA,UAAY,UACb,2CACA,uCACA,yCAGHJ,K,OCYEW,G,kNArCXC,MAAQ,CACJL,SAAU,GACVC,KAAM,I,EAIVK,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOV,GAAKQ,EAAEE,OAAOC,S,EAKhCC,eAAiB,SAACJ,GACdA,EAAEI,iBAEF,EAAKrB,MAAMsB,QAAQ,EAAKP,OAExB,EAAKG,SAAS,CACVR,SAAU,GACVC,KAAM,M,uDAKV,OACI,yBAAKJ,UAAY,YACb,0BAAMgB,SAAUC,KAAKH,gBACjB,2BAAOI,KAAK,OAAOC,YAAY,gBAAgBC,SAAUH,KAAKR,aAAcP,GAAG,WAAWW,MAAOI,KAAKT,MAAML,WAC5G,2BAAOe,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,KAAKR,aAAcP,GAAG,OAAOW,MAASI,KAAKT,MAAMJ,OAC5G,2BAAOc,KAAK,SAASL,MAAM,mB,GA/BxBQ,cCoDRC,G,kNAhDbC,cAAgB,CACdC,MAAO,CACL,CAAEtB,GAAI,EAAGC,SAAU,YAAaC,KAAM,KACtC,CAAEF,GAAI,EAAGC,SAAU,OAAQC,KAAM,QACjC,CAAEF,GAAI,EAAGC,SAAU,OAAQC,KAAM,U,EAIrCW,QAAU,SAAChB,GAETA,EAAKG,GAAKuB,KAAKC,SACf,IAAIC,EAAW,EAAKJ,cAAcC,MAEZ,KAAlBzB,EAAKI,UAAiC,KAAdJ,EAAKK,KAC/BuB,EAASC,KAAK7B,GAEd8B,MAAM,2BAGR,EAAKlB,SAAS,CACZa,MAAOG,K,EAMXrB,WAAa,SAACwB,GACZ,GAAIC,OAAOC,QAAQ,wDAAyD,CAC1E,IAAIC,EAAY,EAAKV,cAAcC,MAC/BU,EAAYD,EAAUE,WAAU,SAAApC,GAAI,OAAIA,EAAKG,KAAO4B,KAExDG,EAAUG,OAAOF,EAAW,GAC5B,EAAKvB,SAAS,CACZa,MAAOS,M,uDAKX,OACE,yBAAKjC,UAAU,OACb,qDACA,kBAAC,EAAD,CAAWL,cAAesB,KAAKM,cAAcC,MAAOlB,WAAYW,KAAKX,aACrE,kBAAC,EAAD,CAAUS,QAASE,KAAKF,e,GA3CdM,cCOEgB,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a7657927.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ShowItems.css';\r\n\r\nconst ShowItems = (props) => {\r\n\r\n    const itemsFromState = props.items_to_show;\r\n    const allItems = itemsFromState.length ? (\r\n        itemsFromState.map(item => {\r\n        return (\r\n            <div className = \"todoitems\" key={item.id} >\r\n                <span>{item.activity} </span>\r\n                <span>{item.time} </span>\r\n                {/* arrow function عشان ماينفذش على طول */}\r\n                <span onClick={() => props.deleteItem(item.id)}>&times;</span> \r\n            </div>\r\n        );\r\n    }) ) : (\r\n        <p>Empty List !</p>\r\n    )\r\n\r\n    return (\r\n        <div className = \"container\">\r\n            <div className = \"header\">\r\n                <span>Activity </span>\r\n                <span>time </span>\r\n                <span>Action</span>\r\n            </div>\r\n            \r\n            {allItems}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowItems;","import React, { Component } from 'react';\r\nimport \"./additems.css\";\r\nclass AddItems extends Component {\r\n    state = {\r\n        activity: \"\",\r\n        time: \"\"\r\n    }\r\n\r\n    //fill data in the state\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        });\r\n    }\r\n\r\n    //preventDefault\r\n    preventDefault = (e) => {\r\n        e.preventDefault();//prevent refreshing the page when press enter or submit\r\n\r\n        this.props.addItem(this.state); //send the state to the \"addItem\" function as a parameter\r\n       //reset the state after submitting the data into originalState\r\n        this.setState({\r\n            activity: \"\",\r\n            time: \"\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className = \"controls\">\r\n                <form onSubmit={this.preventDefault}>\r\n                    <input type=\"text\" placeholder=\"Your Activity\" onChange={this.handleChange} id=\"activity\" value={this.state.activity} />\r\n                    <input type=\"number\" placeholder=\"Activity Time\" onChange={this.handleChange} id=\"time\" value = {this.state.time} />\r\n                    <input type=\"submit\" value=\"Add Todo\" />\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddItems;","import React, { Component } from 'react';\nimport Showitems from './components/ShowItems';\nimport Additems from './components/AddItems';\nimport './App.css';\n\nclass App extends Component {\n  originalState = {\n    items: [\n      { id: 1, activity: \"breakfast\", time: \"7\" },\n      { id: 2, activity: \"pray\", time: \"7:30\" },\n      { id: 3, activity: \"work\", time: \"7:45\" }]\n  }\n\n  //add item \n  addItem = (item) => {\n\n    item.id = Math.random();\n    let newItems = this.originalState.items;\n\n    if (item.activity !== \"\" && item.time !== \"\") {\n      newItems.push(item);//push todo item in the new listitems\n    } else {\n      alert(\"Please Fill Your Data..\");\n    }\n\n    this.setState({\n      items: newItems\n    });\n\n  }\n\n  //delete item\n  deleteItem = (itemId) => {\n    if (window.confirm(\"Are You Sure?! Press ok to delete or cancel to abort\")) {\n      let newItems2 = this.originalState.items;\n      let itemIndex = newItems2.findIndex(item => item.id === itemId);\n\n      newItems2.splice(itemIndex, 1);\n      this.setState({\n        items: newItems2\n      });\n    }//end if\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Your Today's Activity</h2>\n        <Showitems items_to_show={this.originalState.items} deleteItem={this.deleteItem} />\n        <Additems addItem={this.addItem} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}